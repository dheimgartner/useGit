\documentclass[a4paper]{article}
\usepackage{minimal}

%\VignetteIndexEntry{Let's use version control (git)!}
%\VignetteDepends{foo}
%\VignettePackage{useGit}

\usepackage[svgnames]{xcolor}
\usepackage[nochapters,eulermath=true]{classicthesis}
\usepackage{natbib}

%% recommended packages
\usepackage{orcidlink,thumbpdf}
\usepackage{framed}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{pmboxdraw}
\usepackage{float}

\bibliographystyle{minimal}

\setlength{\marginparwidth}{4cm}
\setlength{\marginparsep}{0.4cm}
\setlength{\marginparpush}{0.75cm}
\hypersetup{citecolor=teal}

\usepackage{minted}
\newminted{bash}{bgcolor=Beige, bgcolorpadding=0.5em}
\newcommand{\bash}[1]{\mintinline{bash}|#1|}

\newminted[gitcode]{bash}{bgcolor=Beige, bgcolorpadding=0.5em}
\newcommand{\git}[1]{\mintinline{bash}|#1|}

\newcommand{\use}[1]{\code{#1}}

\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE}
<<preliminaries, echo=FALSE, results=hide>>=
options(prompt = " ",  continue = "   ", width = 70, useFancyQuotes = FALSE)
library("useGit")
@

\author{Daniel Heimgartner}

\title{Let's use version control (git)!}

\begin{document}
\maketitle

\marginpar{Highly recommended: Read the first three chapters of \url{https://git-scm.com/book/en/v2}}

Code to be executed in a terminal running bash looks like this
\begin{gitcode}
git init .  # what's the connection between git and bash? dot?
\end{gitcode}

\section{Why?}

\leftmarginpar{What is \proglang{git}}
\begin{itemize}
\item \proglang{git} is a (there are many!) \emph{version control system} that helps you track and manage changes to source code (files) over time.
\item Think of a (time-ordered) linked chain of cabinets where you store your current state of your work. And in each cabinet you also put a list, describing the work you did since the previous archiving in the previous cabinet. Thinking about this metaphor, what benefits could you think of?
\end{itemize}

\leftmarginpar{What are the benefits?}
\begin{itemize}
\item Don't be afraid to experiment/mess with a document (better than \use{Ctrl+Z})
\item Keep track of how a document changed (e.g., submitted vs. re-submitted paper/script)
\item If your in the habit of \code{foo\_v01.R}, \code{foo\_v02.R}, ..., \code{foo\_v99.R}, \proglang{git} is for you!
\item Own mental freedom. But also key benefits when collaborating (next week).
\end{itemize}

\leftmarginpar{What will I learn?}
\begin{itemize}
\item Today we will focus on how \emph{you} for yourself can use \proglang{git}. Collaboration (i.e., when multiple people work on the same ``git repository'') is the topic of the next meeting.
\item The goal for today: 1. Understand the \proglang{git} cycle, 2. Start tracking a project with \proglang{git}, 3. Inspect changes you've made, 4. Accept or restore changes, 5. Commit changes, 6. Inspect (checkout) a previous version, 7. Experiment on a new branch, 8. Accept (merge) the changes of the new branch.
\item Learn where to learn more!
\end{itemize}

\section{Settling a potential confusion}

\proglang{git} is an executable program (not constrained to \proglang{bash}). It's a command-line-interface (CLI) tool -- an API following the \bash{command -options args} syntax (and not a programming language or something like that). I.e., we have to learn (!) the API/commands...

% path => executable program (from last session) => command -options args => i.e., it's an API (not a programming language or something like that) => R CLI script
\marginpar{You could clone (next session) the source \url{https://github.com/git/git} (adjust it) and build the executable program yourself!}
\begin{bashcode}
which git
/usr/bin/git
\end{bashcode}

\section{Getting help}

Do you remember from last week? Where can you get help?
\begin{bashcode}
git help
git help <verb>    # git help init
git <verb> --help  # git init --help
# this is what we've discussed, using man...
man git-<verb>     # man git-init
\end{bashcode}

\section{Let's get started}

Let's imagine we have a project currently consisting of one file only (so unfortunately, it's not an \R-package...).

\begin{bashcode}
cd foo
tree .
.
└── script.R

0 directories, 1 file

cat script.R
#= script.R
f <- function() {
  NULL
}
\end{bashcode}

\marginpar{We use version control for a project/directory (and then add or exclude individual files)...}
And we want to start tracking changes in that project, i.e., we want to use \proglang{git} version control in that repository!

\leftmarginpar{The \proglang{git} cycle}
The general workflow (for today) looks something like this

\marginpar{``blob'' is not really a meaningful commit message. Try to be precise about what you did. Try to make meaningful chunks you commit (i.e., \git{git add} files and changes that belong together)}
\begin{bashcode}
  +-------------------------+
  |    git init .           |
  |    git add .            |
  |    git commit -m "init" |
  +-------------------------+
             |
             v
   +------------------+
   |  Work on foo.R   | <----+
   +------------------+      |
             |               |
             v               |
     +---------------+       |
     | git add foo.R |       |
     +---------------+       |
             |               |
             v               |
+----------------------+     |
| git commit -m "blob" |-----+
+----------------------+
\end{bashcode}
Let's go through this step by step

\leftmarginpar{\git{git init}}
``Create an empty \proglang{git} repository or reinitialize an existing one''
\begin{bashcode}
# don't worry about this...
mkdir foo
cd foo
printf "#= script.R\nf <- function() {\n  NULL\n}\n" > script.R

# this is the important line
git init .
\end{bashcode}

\leftmarginpar{\git{git status}}
``Show the working tree status''
\begin{bashcode}
git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        script.R

nothing added to commit but untracked files present (use "git add" to track)
\end{bashcode}

\leftmarginpar{\git{git add}}
``Add file contents to the index''
\begin{bashcode}
git add .      # add all changes
git add foo.R  # add changes in foo.R
\end{bashcode}
%
Again, insightful to check the status
\begin{bashcode}
git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   script.R
\end{bashcode}
\marginpar{As always, it's a good idea to read the output of a command -- it is there to help you!}

\leftmarginpar{\git{git commit}}
``Record changes to the repository'' \git{git add} is like adding a file to the file cabinet, but the door has not yet been closed (you can still replace it) and the list recording the changes is not yet written...
\begin{bashcode}
git commit -m "init"  # the usual first commit message
\end{bashcode}
%
Now, it's officially a \proglang{git} repository -- yay!!
\marginpar{What makes a repository a \proglang{git} repository? Hint: \bash{ls -a .}}

...Now, you work on script.R...

\leftmarginpar{\git{git diff}}
``Show changes between commits, commit and working tree, etc.''
\begin{bashcode}
git diff .  # or script.R
diff --git a/script.R b/script.R
index 1165da1..a008e94 100644
--- a/script.R
+++ b/script.R
@@ -1,4 +1,4 @@
 #= script.R
 f <- function() {
-  NULL
+  "foo"
 }
\end{bashcode}

...Add and commit again...

\leftmarginpar{\git{git log}}
``Show commit logs''
\begin{bashcode}
git log
commit e62788c24e2d9fdc5b79b111256935ad8a87d97c (HEAD -> master)
Author: daniehei <daniel.heimgartner@ivt.baug.ethz.ch>
Date:   Tue May 20 15:36:39 2025 +0200

    foo

commit 60a73d8900f91290397f595afec5b7e88cf8d18a
Author: daniehei <daniel.heimgartner@ivt.baug.ethz.ch>
Date:   Tue May 20 15:34:18 2025 +0200

    init
\end{bashcode}


\leftmarginpar{\git{git checkout}}
``Switch branches or restore working tree files''
\begin{bashcode}
git checkout HEAD~1  # go one commit back
cat script.R
#= script.R
f <- function() {
  NULL
}
\end{bashcode}
%
Where has our valuable work gone???

\leftmarginpar{\git{git branch}}
``List, create, or delete branches''
\marginpar{As we will learn next session, \proglang{GitHub} allows you essentially to host (remote) branches, such that multiple participants can inspect and share work. And then they wrap of course other useful functionality around it...}
When you really want to mess with your work, I would recommend to generate a new branch first (as it is easier to checkout, restore branches instead of going back in the commit history)...
\begin{bashcode}
git branch dev    # you can call it whatever you like
git checkout dev  # don't forget to checkout!
\end{bashcode}
%
Now, we are on a new branch -- completely leaving the \code{master} branch unaffected!
\marginpar{Exercise: Try to rename the branch. Hint: \bash{man git-branch} and then type \use{/rename} and hit \use{Enter}.}

There are two possibilities going forward: 1. We like the changes we made on our \code{dev} branch, or, 2. We don't like them at all, we hate them, and want get rid of them! Let's start with 2. to confuse you!

\begin{bashcode}
git checkout master # switch to main again
git branch -d dev   # and delete the branch
\end{bashcode}

\leftmarginpar{\git{git merge}}
``Join two or more development histories together''
Let's say we like the changes made on \code{dev} branch... Oups, sorry, you just deleted the branch -- the changes are actually gone forever! Let's say we did not execute the code above.
\begin{bashcode}
git checkout master
git diff main dev  # diff works also with branches
git merge dev      # this integrates/merges the changes
\end{bashcode}

\section{Special files and folders}

\leftmarginpar{\code{.git}}
This is where the magic happens!

\leftmarginpar{\code{.gitignore}}
\marginpar{Careful: Once you've committed a file containing sensitive information, this information is part of the history and can be recovered, even if you remove the information from the file again. There are ways to remove sensitive information completely from the history, but it is still a good to be sensitized (?)}
Put all files or folders there which should not be tracked by \proglang{git} (e.g., passwords)...

\section{Helpful tools}

\leftmarginpar{\proglang{gitk}}
\proglang{gitk} is a graphical repository browser. It can be thought of as a GUI wrapper for \git{git diff} or \git{git log} and is useful for exploring and visualizing the history of a repository. Try it!
%
...Make changes to script.R...
\begin{bashcode}
gitk
\end{bashcode}
%
\marginpar{Almost every IDE (e.g., RStudio or VScode have built-in support to visualize such changes. Of course, use them if you prefer!)}

\leftmarginpar{Resources}
\begin{itemize}
\item Foo
\end{itemize}

\bibliography{refs}

\end{document}
